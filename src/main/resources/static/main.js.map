{
  "version": 3,
  "sources": [
    "webpack:///./src/$_lazy_route_resource lazy namespace object",
    "webpack:///./src/app/app-routing.module.ts",
    "webpack:///./src/app/app.component.css",
    "webpack:///./src/app/app.component.html",
    "webpack:///./src/app/app.component.ts",
    "webpack:///./src/app/app.module.ts",
    "webpack:///./src/app/components/registration/registration.component.css",
    "webpack:///./src/app/components/registration/registration.component.html",
    "webpack:///./src/app/components/registration/registration.component.ts",
    "webpack:///./src/app/models/user.ts",
    "webpack:///./src/app/validators/custom-validators.ts",
    "webpack:///./src/environments/environment.ts",
    "webpack:///./src/main.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "main.js",
  "sourcesContent": [
    "function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";",
    "import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nimport {RegistrationComponent} from \"./components/registration/registration.component\";\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: RegistrationComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n}\r\n",
    "module.exports = \"\"",
    "module.exports = \"<router-outlet></router-outlet>\\r\\n\\r\\n\"",
    "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Household budget';\r\n}\r\n",
    "import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppComponent} from './app.component';\r\nimport {RegistrationComponent} from './components/registration/registration.component';\r\nimport {AppRoutingModule} from \"./app-routing.module\";\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {MatCardModule, MatFormFieldModule, MatInputModule} from \"@angular/material\";\r\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegistrationComponent\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatCardModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
    "module.exports = \".red {\\r\\n  background: url('background.png') no-repeat;\\r\\n  background-size: cover;\\r\\n  min-width: 100vw;\\r\\n  min-height: 100vh;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.blue {\\r\\n  background: dodgerblue;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.white {\\r\\n  padding: 24px;\\r\\n  position: relative;\\r\\n  display: compact;\\r\\n  background: white;\\r\\n  min-width: 400px;\\r\\n  min-height: 400px;\\r\\n  horiz-align: center;\\r\\n  border-radius: 3px;\\r\\n}\\r\\n\\r\\n.mat-input-form {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n@media screen and (max-device-width: 768px){\\r\\n\\r\\n  .white {\\r\\n    min-width: 0;\\r\\n    min-height: 0;\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    margin: 24px;\\r\\n  }\\r\\n}\\r\\n\"",
    "module.exports = \"<div class=\\\"red\\\">\\r\\n  <div class=\\\"white\\\">\\r\\n    <div class=\\\"text-center\\\">\\r\\n      <h3 class=\\\"font-weight-bold\\\">\\r\\n        <strong>SIGN UP</strong>\\r\\n      </h3>\\r\\n    </div>\\r\\n    <br>\\r\\n\\r\\n    <form [formGroup]=\\\"registrationForm\\\" #form=\\\"ngForm\\\">\\r\\n      <mat-form-field class=\\\"mat-input-form\\\">\\r\\n        <input matInput\\r\\n               placeholder=\\\"Username\\\"\\r\\n               formControlName=\\\"username\\\"\\r\\n               required>\\r\\n        <mat-error *ngIf=\\\"registrationForm.get('username').hasError\\\">{{getUsernameErrorMessage()}}\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <br>\\r\\n      <mat-form-field class=\\\"mat-input-form\\\">\\r\\n        <input matInput\\r\\n               placeholder=\\\"Email\\\"\\r\\n               formControlName=\\\"email\\\"\\r\\n               required>\\r\\n        <mat-error *ngIf=\\\"registrationForm.get('email').hasError\\\">{{getEmailErrorMessage()}}</mat-error>\\r\\n      </mat-form-field>\\r\\n      <br>\\r\\n      <mat-form-field class=\\\"mat-input-form\\\">\\r\\n        <input matInput\\r\\n               placeholder=\\\"Password\\\"\\r\\n               formControlName=\\\"password\\\"\\r\\n               type=\\\"password\\\"\\r\\n               required>\\r\\n        <mat-error *ngIf=\\\"registrationForm.get('password').hasError\\\">{{getPasswordErrorMessage()}}\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <br>\\r\\n      <mat-form-field class=\\\"mat-input-form\\\">\\r\\n        <input matInput\\r\\n               placeholder=\\\"Confirm password\\\"\\r\\n               formControlName=\\\"confirmPassword\\\"\\r\\n               type=\\\"password\\\"\\r\\n               required>\\r\\n        <mat-error *ngIf=\\\"registrationForm.get('confirmPassword').hasError\\\">\\r\\n          {{getConfirmPasswordErrorMessage()}}\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n      <br><br>\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-success btn-lg\\\" style=\\\"width: 100%;\\\">Sign up</button>\\r\\n    </form>\\r\\n\\r\\n    <br>\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <p class=\\\"font-small white-text d-flex justify-content-end\\\">Have an account?\\r\\n        <a href=\\\"#\\\" class=\\\"ml-1 font-weight-bold\\\"> Sign in</a>\\r\\n      </p>\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n\"",
    "import {Component, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {User} from \"../../models/user\";\r\nimport {CustomValidators} from \"../../validators/custom-validators\";\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.css']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n  public registrationForm: FormGroup;\r\n  private user: User = new User();\r\n\r\n  constructor(private formBuilder: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.registrationForm = this.formBuilder.group({\r\n      username: new FormControl(this.user.username, [Validators.required]),\r\n      email: new FormControl(this.user.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.user.password, [Validators.required]),\r\n      confirmPassword: new FormControl(this.user.confirmPassword, [Validators.required, CustomValidators.confirmPassword])\r\n    });\r\n  }\r\n\r\n  getUsernameErrorMessage() {\r\n    return this.registrationForm.get('username').hasError('required') ? 'Username can not be empty.' : '';\r\n  }\r\n\r\n  getEmailErrorMessage() {\r\n    return this.registrationForm.get('email').hasError('required') ? 'Email can not be empty.' :\r\n      'Email has invalid format.';\r\n  }\r\n\r\n  getPasswordErrorMessage() {\r\n    return this.registrationForm.get('password').hasError('required') ? 'Password can not be empty.' : '';\r\n  }\r\n\r\n  getConfirmPasswordErrorMessage() {\r\n    return this.registrationForm.get('confirmPassword').hasError('required')\r\n      ? 'Confirm password can not be empty.' :\r\n      this.registrationForm.get('confirmPassword').hasError('confirmPassword')\r\n        ? 'Password and confirm password must be the same.' :\r\n        '';\r\n  }\r\n}\r\n",
    "export class User {\r\n\r\n  public id?: number;\r\n  public username: string;\r\n  public email: string;\r\n  public password?: string;\r\n  public confirmPassword?: string;\r\n  public oldPassword?: string;\r\n  public created: Date;\r\n\r\n}\r\n",
    "import {AbstractControl, ValidationErrors} from \"@angular/forms\";\r\n\r\nexport class CustomValidators {\r\n\r\n  public static confirmPassword(control: AbstractControl) : ValidationErrors | null {\r\n    if (control && control.value !== null || control.value !== undefined) {\r\n      const confirmPasswordValue = control.value;\r\n      const passControl = control.root.get('password');\r\n      if (passControl) {\r\n        const passwordValue = passControl.value;\r\n        if (passwordValue !== confirmPasswordValue || passwordValue === '') {\r\n          return {\r\n            confirmPassword: true,\r\n            isError: true\r\n          };\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n",
    "// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n",
    "import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"
  ],
  "sourceRoot": ""
}